title: $:/plugins/Gk0Wk/echarts/addons/TheBrain.js
type: application/javascript
module-type: echarts-component

var Categories = [
  {
    name: "Focusing",
  },
  {
    name: "History",
  },
  {
    name: "Link To",
  },
  {
    name: "Backlink From",
  },
  {
    name: "Tag To",
  },
  {
    name: "Tag By",
  },
  {
    name: "Parent",
  },
];

exports.onMount = function (echart, addonAttributes, echartsWidget) {
  var state = {
    historyTiddlers: [],
    widget: echartsWidget,
  };
  echart.on("click", function (event) {
    if (event.dataType === "node") {
      new $tw.Story().navigateTiddler(event.data.name);
    } // else if (event.dataType === "edge") { }
  });
  return state;
};

exports.shouldUpdate = function (_, changedTiddlers) {
  return $tw.utils.count(changedTiddlers) > 0;
};

function getAliasOrTitle(tiddlerTitle, aliasField, variables) {
  var tiddler = $tw.wiki.getTiddler(tiddlerTitle);
  if (tiddler) {
    var aliasValue = tiddler.fields[aliasField];
    return aliasValue && typeof aliasValue === "string"
      ? $tw.wiki.renderText("text/html", "text/vnd.tiddlywiki", aliasValue, {
          variables: variables ? variables : {},
        })
      : tiddlerTitle;
  } else {
    return tiddlerTitle;
  }
}

exports.onUpdate = function (echart, state, addonAttributes) {
  var focussedTiddler = $tw.wiki.getTiddlerText("$:/temp/focussedTiddler");
  if (focussedTiddler && focussedTiddler.startsWith("$:/")) return;
  var nodes = [];
  var edges = [];
  var aliasField =
    addonAttributes.aliasField === "" ? undefined : addonAttributes.aliasField;
  var excludeFilter =
    addonAttributes.excludeFilter === ""
      ? undefined
      : addonAttributes.excludeFilter === undefined
      ? undefined
      : $tw.wiki.compileFilter(addonAttributes.excludeFilter);
  if (focussedTiddler && focussedTiddler !== "") {
    var nodeMap = {};
    nodeMap[""] = true;

    // 当前关注的 Tiddler
    nodeMap[focussedTiddler] = true;
    nodes.push({
      name: focussedTiddler,
      // fixed: true,
      category: 0,
      label: {
        formatter: getAliasOrTitle(
          focussedTiddler,
          aliasField,
          state.widget ? state.widget.variables : {}
        ),
      },
    });

    // 历史路径
    var nextTiddler = focussedTiddler;
    var historyMap = {};
    for (var i = state.historyTiddlers.length - 2; i >= 0; i--) {
      var tiddlerTitle = state.historyTiddlers[i];
      if (historyMap[tiddlerTitle]) continue;
      if (tiddlerTitle === nextTiddler) continue;
      if (tiddlerTitle.startsWith("$:/")) continue;
      edges.push({
        source: tiddlerTitle,
        target: nextTiddler,
        label: {
          show: true,
          formatter: "history",
        },
      });
      historyMap[tiddlerTitle] = true;
      nextTiddler = tiddlerTitle;
      if (nodeMap[tiddlerTitle]) break;
      if (
        !excludeFilter ||
        excludeFilter.call($tw.wiki, [tiddlerTitle]).length === 0
      )
        nodes.push({
          name: tiddlerTitle,
          label: { formatter: getAliasOrTitle(tiddlerTitle, aliasField) },
          category: 1,
        });
      nodeMap[tiddlerTitle] = true;
    }

    // 链接
    $tw.utils.each(
      $tw.wiki.getTiddlerLinks(focussedTiddler),
      function (tiddlerTitle) {
        edges.push({
          source: focussedTiddler,
          target: tiddlerTitle,
          label: {
            show: true,
            formatter: "link",
          },
        });
        if (nodeMap[tiddlerTitle]) return;
        if (
          !excludeFilter ||
          excludeFilter.call($tw.wiki, [tiddlerTitle]).length === 0
        )
          nodes.push({
            name: tiddlerTitle,
            label: { formatter: getAliasOrTitle(tiddlerTitle, aliasField) },
            category: 2,
          });
        nodeMap[tiddlerTitle] = true;
      }
    );

    // 反链
    $tw.utils.each(
      $tw.wiki.getTiddlerBacklinks(focussedTiddler),
      function (tiddlerTitle) {
        edges.push({
          source: tiddlerTitle,
          target: focussedTiddler,
          label: {
            show: true,
            formatter: "backlink",
          },
        });
        if (nodeMap[tiddlerTitle]) return;
        if (
          !excludeFilter ||
          excludeFilter.call($tw.wiki, [tiddlerTitle]).length === 0
        )
          nodes.push({
            name: tiddlerTitle,
            label: { formatter: getAliasOrTitle(tiddlerTitle, aliasField) },
            category: 3,
          });
        nodeMap[tiddlerTitle] = true;
      }
    );

    // 指向哪些tag
    $tw.utils.each(
      $tw.wiki.getTiddler(focussedTiddler).fields.tags,
      function (tiddlerTitle) {
        if (!$tw.wiki.tiddlerExists(tiddlerTitle)) return;
        edges.push({
          source: focussedTiddler,
          target: tiddlerTitle,
          label: {
            show: true,
            formatter: "tag",
          },
        });
        if (nodeMap[tiddlerTitle]) return;
        if (
          !excludeFilter ||
          excludeFilter.call($tw.wiki, [tiddlerTitle]).length === 0
        )
          nodes.push({
            name: tiddlerTitle,
            label: { formatter: getAliasOrTitle(tiddlerTitle, aliasField) },
            category: 4,
          });
        nodeMap[tiddlerTitle] = true;
      }
    );

    // 被谁作为 Tag
    $tw.utils.each(
      $tw.wiki.getTiddlersWithTag(focussedTiddler),
      function (tiddlerTitle) {
        edges.push({
          source: tiddlerTitle,
          target: focussedTiddler,
          label: {
            show: true,
            formatter: "tag",
          },
        });
        if (nodeMap[tiddlerTitle]) return;
        if (
          !excludeFilter ||
          excludeFilter.call($tw.wiki, [tiddlerTitle]).length === 0
        )
          nodes.push({
            name: tiddlerTitle,
            label: { formatter: getAliasOrTitle(tiddlerTitle, aliasField) },
            category: 5,
          });
        nodeMap[tiddlerTitle] = true;
      }
    );

    // 父条目
    var path = focussedTiddler.split("/");
    if (path.length > 1) {
      var parentTiddler = path.slice(0, -1).join("/");
      $tw.utils.each(
        [parentTiddler, parentTiddler + "/"],
        function (tiddlerTitle) {
          edges.push({
            source: tiddlerTitle,
            target: focussedTiddler,
            label: {
              show: true,
              formatter: "parent",
            },
          });
          if (nodeMap[tiddlerTitle]) return;
          if (
            !excludeFilter ||
            excludeFilter.call($tw.wiki, [tiddlerTitle]).length === 0
          )
            nodes.push({
              name: tiddlerTitle,
              label: { formatter: getAliasOrTitle(tiddlerTitle, aliasField) },
              category: 6,
            });
          nodeMap[tiddlerTitle] = true;
        }
      );
    }
  }
  var index_ = state.historyTiddlers.indexOf(focussedTiddler);
  if (index_ > -1) state.historyTiddlers.splice(index_, 1);
  state.historyTiddlers.push(focussedTiddler);
  state.historyTiddlers.slice(-10);
  echart.setOption({
    legend: [
      {
        data: Categories.map(function (a) {
          return a.name;
        }),
      },
    ],
    title: {
      text: "The Brain View",
      show: true,
      top: "bottom",
      left: "right",
    },
    series: [
      {
        name: "The Brain View",
        type: "graph",
        layout: "force",
        nodes: nodes,
        edges: edges,
        categories: Categories,
        roam: true,
        draggable: true,
        zoom: 4.0,
        label: {
          position: "right",
          show: true,
        },
        force: {
          repulsion: 50,
        },
        edgeSymbol: ["circle", "arrow"],
        edgeSymbolSize: [4, 10],
        edgeLabel: {
          fontSize: 5,
        },
        lineStyle: {
          opacity: 0.9,
          width: 2,
          curveness: 0,
        },
      },
    ],
  });
};
